#!/bin/bash

# Jul 18, 2003
# last modified 2022-12-28

sed -e 's/	/ /g' tex2page.rkt |\
sed -e 's/ \ *$//' |\
sed -e 's/^ *$/END_OF_CURR_EXP/' > my-tex2page

function ignoredef() {
  for f in "$@"
  do
    sed -e '/^(define \ *'$f' *$/,/^END_OF_CURR_EXP/d' my-tex2page |\
    sed -e '/^(define \ *('$f') *$/,/^END_OF_CURR_EXP/d' |\
    sed -e '/^(define \ *('$f' \ *.*$/,/^END_OF_CURR_EXP/d' |\
    sed -e '/^(define \ *'$f' \ *.*$/,/^END_OF_CURR_EXP/d' > .sedtmp
    mv .sedtmp my-tex2page
  done
}

function rename() {
  # echo doing rename "$@"
  sed -e 's/'$1'/'$2'/g' my-tex2page > .sedtmp
  mv .sedtmp my-tex2page
}

function uncall() {
  for f in "$@"
  do
    sed -e '/^('$f'/,/^END_OF_CURR_EXP/d' my-tex2page > .sedtmp
    mv .sedtmp my-tex2page
  done
}

ignoredef \
'\*scheme-version\*' \
'\*tex2page-namespace\*' \
call-with-input-string \
strftime \
string-index\
string-reverse-index

rename '(add1' '(1+'
rename '(current-seconds' '(current-time'
rename '(date-day' '(tm:mday'
rename '(date-hour' '(tm:hour'
rename '(date-minute' '(tm:min'
rename '(date-month' '(tm:mon'
rename '(date-time-zone-offset' '(tm:gmtoff'
rename '(date-week-day' '(tm:wday'
rename '(date-year' '(tm:year'
rename '(define-syntax' '(almost-define-syntax'
rename '(flush-output' '(force-output'
rename '(index-of' '(list-index'
rename '(list\*' '(cons*'
rename '(ormap' '(or-map'
rename '(remove' '(delete'
rename '(seconds->date' '(localtime'
rename '(string->keyword' '(string->symbol'
rename '(string-reverse-index' '(string-rindex'
rename '(sub1' '(1-'
rename '\([^-f]\)false' '\1#f'
rename '\([^-:]\)null\([^?]\)' '\1`()\2'
rename 'null$' '`()'
rename '\([^-f]\)true' '\1#t'

uncall define-namespace-anchor require tex2page

sed -e '/^#!/,/^END_OF_CURR_EXP/d' my-tex2page > .sedtmp
mv .sedtmp my-tex2page

sed -e '/^#lang racket/,/END_OF_CURR_EXP/d' my-tex2page > .sedtmp
mv .sedtmp my-tex2page

cat > guile.preamble <<EOF
#!/bin/sh
exec guile -e main -s \$0 \"\$@\"
!#

(define *scheme-version*
  (string-append "Guile " (version)
    (if (getenv "COMSPEC") " windows" " unix")))

(define *tex2page-namespace* (interaction-environment))

(define-macro fluid-let
  (lambda (xvxv . ee)
    (let ((xx (map car xvxv))
          (vv (map cadr xvxv))
          (old-xx (map (lambda (xv)
                         (string->symbol
                          (string-append "%__"
                                         (symbol->string (car xv))))) xvxv))
          (res '%_*_res))
      \`(let ,(map (lambda (old-x x) \`(,old-x ,x)) old-xx xx)
         ,@(map (lambda (x v)
                  \`(set! ,x ,v)) xx vv)
         (let ((,res (begin ,@ee)))
           ,@(map (lambda (x old-x) \`(set! ,x ,old-x)) xx old-xx)
           ,res)))))

(define (file-or-directory-modify-seconds f) (vector-ref (stat f) 9))

(define (read-line i)
  (let ((c (peek-char i)))
    (if (eof-object? c)
        c
        (let loop ((r (quote ())))
          (let ((c (read-char i)))
            (if (or (eof-object? c) (char=? c #\newline))
                (list->string (reverse! r))
                (loop (cons c r))))))))

(define-macro almost-define-syntax
  (lambda (name proc)
     \`(define-macro ,name
         (lambda _args
           (let ((datum->syntax (lambda (x y) y))
                 (syntax->datum (lambda (x) x)))
              (,proc (cons 'defstruct _args)))))))

(define (main args)
  (tex2page
    (and (>= (length args) 2)
         (list-ref args 1))))
EOF

sed -e '1s/^/DUMMY_LINE\n/' my-tex2page |\
sed -e '1r guile.preamble' |\
sed -e '1d' |\
sed -e 's/^END_OF_CURR_EXP.*$//' > .sedtmp
mv .sedtmp my-tex2page
chmod +x my-tex2page

rm -f guile.preamble
