#!/bin/sh

# Last modified: 2017-01-17

# Set scmxlate to the pathname of scmxlate/scmxlate.scm
# on your system, if you know it.  Otherwise let
# this script figure it out.

scmxlate=

# Modify searchpathforscmxlate if you think a
# different set of directories should be
# searched for scmxlate/scmxlate.scm.

searchpathforscmxlate=".. ../.. ../../.. $HOME /usr/local /opt"

findscmxlate() {
  test "$scmxlate" && return
  echo Trying to find scmxlate/scmxlate.scm on your machine.
  echo This may take a while.
  for f in $searchpathforscmxlate
  do
    scmxlate=`find $f -name scmxlate.scm -print|sed 1q`
    if test "$scmxlate"
    then echo Found $scmxlate
    return
    fi
    #test "$scmxlate" && return
  done
  echo Couldn\'t find scmxlate/scmxlate.scm on your machine.
  echo Trying to get it off the Internet.
  git clone https://github.com/ds26gte/scmxlate
  scmxlate=scmxlate/scmxlate.scm

  test "$scmxlate" && return
  echo Unable to get scmxlate off the Internet.
  echo scmxlate is available at
  echo https://github.com/ds26gte/scmxlate
  echo You may want to get and install scmxlate manually,
  echo then try configure again.
  exit
}

adieu() {
  if test -f my-tex2page
  then
    mv my-tex2page tex2page
    chmod +x tex2page
    echo tex2page has been successfully configured for $dialect.
    echo You may put it in your PATH.
  else
    echo configure "$@" failed!
  fi
}

makeit() {
  case "$dialect" in
    abcl|allegro|clisp|clozure|cmucl|ecl|mkcl|sbcl-compiled)
    :;;
    #bigloo|chez|chicken|gambit|gauche|guile|mitscheme|petite|plt|scm|sxm)
    chez|chicken|gambit|gauche|guile|petite|plt)
    findscmxlate;;
    *)
    echo Dialect $dialect not supported!
    exit;;
  esac
  #echo Ignore questions on console.
  case "$dialect" in
    sbcl-compiled)
    sbcl --eval '(require :sb-executable)' \
    --eval '(sb-executable:make-executable "my-tex2page"
    (list (compile-file "tex2page.lisp")))' \
    --eval '(sb-ext:quit)'
    rm tex2page.fasl;;

    abcl|allegro|clisp|clozure|cmucl|ecl|mkcl)
    echo \":\"\; export LISP=$dialect > my-tex2page
    cat tex2page.lisp >> my-tex2page;;

    bigloo)
    echo bigloo|bigloo -eval '(load "'$scmxlate'")';;

    chez)
    echo chez|scheme $scmxlate;;

    chicken)
    echo chicken|csi $scmxlate;;

    gambit)
    echo gambit|gsi $scmxlate;;

    gauche)
    echo gauche|gosh -l $scmxlate;;

    guile)
    echo guile|guile -l $scmxlate;;

    mitscheme)
    echo mitscheme|scheme -load $scmxlate;;

    petite)
    echo petite|petite $scmxlate;;

    plt)
    echo If you are not a PLT developer, you probably shouldn\'t
    echo be needing to do this.
    echo plt|racket -f $scmxlate;;

    scm)
    echo scm|scm -f $scmxlate;;

    scsh)
    echo scsh|scsh -s $scmxlate;;

    sxm)
    echo sxm|sxi $scmxlate;;

    *)
    echo This had better be 0xdeadc0de.
    exit;;
  esac
}

echodialectsuggestions() {
  test "`which abcl 2>/dev/null|grep -v ' '`"  &&\
    abclpresent=yes
  test "`which scheme 2>/dev/null|grep -v ' '`"  &&\
    chezpresent=yes
  test "`which clisp 2>/dev/null|grep -v ' '`"  &&\
    clisppresent=yes
  test "`which csi 2>/dev/null|grep -v ' '`"  &&\
    chickenpresent=yes
  test "`which ccl 2>/dev/null|grep -v ' '`"  &&\
    clozurepresent=yes
  test "`which lisp 2>/dev/null|grep -v ' '`"  &&\
    cmuclpresent=yes
  test "`which ecl 2>/dev/null|grep -v ' '`" &&\
    eclpresent=yes
  test "`which gosh 2>/dev/null|grep -v ' '`"  &&\
    gauchepresent=yes
  test "`which guile 2>/dev/null|grep -v ' '`"  &&\
    guilepresent=yes
  test "`which mkcl 2>/dev/null|grep -v ' '`" &&\
    mkclpresent=yes
  test "`which petite 2>/dev/null|grep -v ' '`" &&\
    petitepresent=yes
  test "`which racket 2>/dev/null|grep -v ' '`" &&\
    racketpresent=yes
  test "`which sbcl 2>/dev/null|grep -v ' '`"  &&\
    sbclpresent=yes
  echo
  echo Note: The following look promising on your system:
  echo
  echo Common Lisps:
  echo
  test "$abclpresent" &&\
    echo \ \ ./configure --dialect=abcl
  test "$clisppresent" &&\
    echo \ \ ./configure --dialect=clisp
  test "$clozurepresent" &&\
    echo \ \ ./configure --dialect=clozure
  test "$cmuclpresent" &&\
    echo \ \ ./configure --dialect=cmucl
  test "$eclpresent" &&\
    echo \ \ ./configure --dialect=ecl
  test "$mkclpresent" &&\
    echo \ \ ./configure --dialect=mkcl
  test "$sbclpresent" &&\
    echo \ \ ./configure --dialect=sbcl &&\
    echo \ \ ./configure --dialect=sbcl-compiled
  echo
  echo Schemes:
  echo
  test "$chezpresent" &&\
    echo \ \ ./configure --dialect=chez
  test "$chickenpresent" &&\
    echo \ \ ./configure --dialect=chicken
  test "$gambitpresent" &&\
    echo \ \ ./configure --dialect=gambit
  test "$gauchepresent" &&\
    echo \ \ ./configure --dialect=gauche
  test "$guilepresent" &&\
    echo \ \ ./configure --dialect=guile
  test "$petitepresent" &&\
    echo \ \ ./configure --dialect=petite
  test "$racketpresent" &&\
    echo \ \ ./configure --dialect=racket
}

echohelp() {
  echo List of dialects supported:
  echo
  cat dialects/dialects-supported.scm | grep -v "^ *;"

  echo
  echo If your dialect D is listed above, type
  echo \ \ ./configure --dialect=D
  echodialectsuggestions
  exit
}

rm -f tex2page
rm -f my-tex2page

if test 1 -eq `echo $1|grep "^--dialect="|sed 1q|wc -l`
then
  dialect=`echo $1|sed 's/--dialect=//'`
  if test "$dialect" = "racket"
  then 
    cp -p tex2page.rkt my-tex2page
  elif test "$dialect" = "sbcl" 
  then
    cp -p tex2page.lisp my-tex2page
  elif test "$dialect" = "guile" -a -f ./dialects/make-guile-version
  then
    ./dialects/make-guile-version
  else
    makeit
  fi
  adieu
else echohelp
fi
